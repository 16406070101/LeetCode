输入: "abcabcbb"
输出: 3 
解释: 因为无重复字符的最长子串是 "abc"，所以其长度为 3。
示例 2:

输入: "bbbbb"
输出: 1
解释: 因为无重复字符的最长子串是 "b"，所以其长度为 1。
示例 3:

输入: "pwwkew"
输出: 3
解释: 因为无重复字符的最长子串是 "wke"，所以其长度为 3。
     请注意，你的答案必须是 子串 的长度，"pwke" 是一个子序列，不是子串。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/longest-substring-without-repeating-characters
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。



//滑动窗口。这时满足条件的字符串就在下i到下标J之间
class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        int size=s.length();
        int j=0;
        int Max=0;
        for(int i=0;i<size;i++){
            for( int k=j;k<i;k++){
                if(s[i]==s[k]){
                    j=k+1;
                    break;
                }
            }
            Max=max(Max,i-j+1);

        }
        return Max;
    }
};




//双指针构成一个滑动窗口,并构造哈希表进行优化
class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        bool size[95]={0};  //起到哈希的作用存放滑动窗口里某个元素有多少个，32～126(共95个)是字符(32是空格），其中48～57为0到9十个阿拉伯数字。
        int i=0;   //前面的指针
        int j=0;   //后面的指针
        int Max=0;
        if(s.length()<2){  //当字符串长度小于2时，不会有重复，直接返回字符串的长度就可以啦
            return s.length();
        }
        while(j<s.length()){   
            if(size[s[j]-' ']==0){    //当第j个元素还没有在滑动窗口中时
                size[s[j]-' ']=1;     //把下标为j 的这个元素归到滑动窗口中,标记为1，表示存在
                Max=max(j-i+1,Max);   //记录这个时候的长度
                j++;                  //把下标为j 的这个元素归到滑动窗口中
            }else{                    //当第j个元素已经存在在窗口里时
                while( i<j){          //将i向后移动直到把这个重复的元素剔除出去
                    if(s[i]==s[j]){   
                        i++;
                        j++;
                        break;
                    }
                    size[s[i]-' ']=0;    
                    i++;
                }
            }
        }
        return Max;
        
    }
};




//补充知识点：
//32～126(共95个)是字符(32是空格），其中48～57为0到9十个阿拉伯数字。
//65～90为26个大写英文字母，97～122号为26个小写英文字母，其余为一些标点符号、运算符号等。
