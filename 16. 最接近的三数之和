/*给定一个包括 n 个整数的数组 nums 和 一个目标值 target。找出 nums 中的三个整数，使得它们的和与 target 最接近。返回这三个数的和。假定每组输入只

例如，给定数组 nums = [-1，2，1，-4], 和 target = 1.

与 target 最接近的三个数的和为 2. (-1 + 2 + 1 = 2).

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/3sum-closest
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。*/

//双指针法，缩小范围。当和大与目标，或小于目标时，通过指针来进行和大小的调整（可以直接看最下面的代码，上面写的有些丑😂）

class Solution {
public:
    int threeSumClosest(vector<int>& nums, int target) {
        int end=nums.size()-1;
        sort(nums.begin(),nums.end());
        int min_target=nums[0]+nums[1]+nums[2];
        int dif=0;
        if(min_target>target){
            dif=min_target-target;
        }else{
            dif=target-min_target;
        }
        for(int i=0;i<=end-1;i++){
            int j=i+1;
            int k=end;
            while(j<k){
                if(nums[i]+nums[j]+nums[k]>target){
                    if(nums[i]+nums[j]+nums[k]-target<dif){
                        dif=nums[i]+nums[j]+nums[k]-target;
                        min_target=nums[i]+nums[j]+nums[k];
                    }
                    k--;
                }else if(nums[i]+nums[j]+nums[k]<target){
                       if(target-(nums[i]+nums[j]+nums[k])<dif){
                        dif=target-(nums[i]+nums[j]+nums[k]);
                        min_target=nums[i]+nums[j]+nums[k];
                    }
                    j++;
                }else{
                    min_target=target;
                    dif=0;
                    return min_target;
                }
            }
        }
        return min_target;
        }
};




//近期发现有取绝对值操作的函数，所以精简一下代码。
class Solution {
public:
    int threeSumClosest(vector<int>& nums, int target) {
        int end=nums.size()-1;      //记录尾指针
        sort(nums.begin(),nums.end());//进行排序，以确保可以使用双指针法
        int min_target=nums[0]+nums[1]+nums[2];//存储当前的答案
        int dif=abs(min_target-target);        //存储当前的接近程度，值越小越接近
        for(int i=0;i<end-1;i++){
            int j=i+1;            //双指针的首指针
            int k=end;            //双指针的尾指针
            while(j<k){
                if(abs(target-(nums[i]+nums[j]+nums[k]))<dif){    //当发现有更接近的组时，记录下来
                    dif=abs(target-(nums[i]+nums[j]+nums[k]));
                    min_target=nums[i]+nums[j]+nums[k];
                }
                if(nums[i]+nums[j]+nums[k]>target){   //当和大与target时，尾指针向前移动，尽量使和变小
                    k--;
                }else if(nums[i]+nums[j]+nums[k]<target){
                    j++;
                }else{
                    min_target=target;                //当差距为零时，不会有更接近的组，这时，直接返回
                    return min_target;
                }
            }
        }
        return min_target;
        }
};


