//给定 n 个非负整数 a1，a2，...，an，每个数代表坐标中的一个点 (i, ai) 。在坐标内画 n 条垂直线，垂直线 i 的两个端点分别为 (i, ai) 和 //(i, 0)。找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。

//说明：你不能倾斜容器，且 n 的值至少为 2。

//图中垂直线代表输入数组 [1,8,6,2,5,4,8,3,7]。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为 49。


//方法一：暴力解法，尝试每一种组合，留下储水量最大的一组，作为返回值
class Solution {
public:
    int maxArea(vector<int>& height) {
        int size=height.size();
        int MAX=0;
        for (int i=0;i<size;i++){
            for (int j=i;j<size;j++){
                MAX=max((j-i)*min(height[i],height[j]),MAX);
            }
        }
       return MAX; 
    }
};



//改进方法2：在方法一的基础上，用前后两个指针缩小范围，使时间复杂度降低到O(n)
class Solution {
public:
    int maxArea(vector<int>& height) {
        int end=height.size()-1; //后面的指针
        int MAX=0;     //存储当前最大需水量
        int begin=0;   //前面的指针
        while(begin<=end){
            MAX=max((end-begin)*min(height[begin],height[end]),MAX);
            if(height[begin]<height[end]){   //移动指针，使范围变小
                begin++;
            }else{
                end--;
            }
        } 
       return MAX; 
    }
};
