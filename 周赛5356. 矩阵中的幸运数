5356. 矩阵中的幸运数
难度
简单

0





给你一个 m * n 的矩阵，矩阵中的数字 各不相同 。请你按 任意 顺序返回矩阵中的所有幸运数。

幸运数是指矩阵中满足同时下列两个条件的元素：

在同一行的所有元素中最小
在同一列的所有元素中最大
 

示例 1：

输入：matrix = [[3,7,8],[9,11,13],[15,16,17]]
输出：[15]
解释：15 是唯一的幸运数，因为它是其所在行中的最小值，也是所在列中的最大值。
示例 2：

输入：matrix = [[1,10,4,2],[9,3,8,7],[15,16,17,12]]
输出：[12]
解释：12 是唯一的幸运数，因为它是其所在行中的最小值，也是所在列中的最大值。
示例 3：

输入：matrix = [[7,8],[1,2]]
输出：[7]

class Solution {
public:
    vector<int> luckyNumbers (vector<vector<int>>& matrix) {
        vector<int >  Myres;//存储结果
        int m=matrix.size();
        if(m==0){
            return Myres;
        }
        int n=matrix[0].size();
        vector<bool > block(n,0);
        vector<vector<bool >> tmp;//一个与matrix同大小的数组
        for(int i=0;i<m;i++){
            tmp.push_back(block);
        }
        for(int i=0;i<m;i++){     //记录每行最小数值的位置，找到后把tmp上对应位置标记出来
            int ix=i;
            int jx=0;
            int imin=matrix[i][0];
            for(int j=0;j<n;j++){
                if(imin>=matrix[i][j]){
                    imin=matrix[i][j];
                    ix=i;
                    jx=j;
                }
            }
            tmp[ix][jx]=1;
        }
        for(int i=0;i<n;i++){       //记录每一列中最大的位置，找到后查看是否为行中最小的位置
            int jx=i;
            int ix=0;
            int imax=matrix[0][i];
            for(int j=0;j<m;j++){
                if(imax<=matrix[j][i]){
                    imax=matrix[j][i];
                    ix=j;
                    jx=i;
                }         
            }
            if(tmp[ix][jx]==1){     //如果是，那么就存储下来
                Myres.push_back(matrix[ix][jx]);
            }
        }
        return Myres;
        
    }
};

