给定一个二叉树，返回其节点值的锯齿形层次遍历。（即先从左往右，再从右往左进行下一层遍历，以此类推，层与层之间交替进行）。

例如：
给定二叉树 [3,9,20,null,null,15,7],

    3
   / \
  9  20
    /  \
   15   7
返回锯齿形层次遍历如下：

[
  [3],
  [20,9],
  [15,7]
]

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/binary-tree-zigzag-level-order-traversal
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。





/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> zigzagLevelOrder(TreeNode* root) {
        vector<vector<int>>  res;
        if(root==NULL){
            return res;
        }
        queue<TreeNode*> qu;
        qu.push(root);
        int i=0;              //控制是从哪一边读取，使之满足锯齿形的层次遍历
        while(!qu.empty()){
            int len=qu.size();
            vector<int>  temp;
            for(int i=0;i<len;i++){
                TreeNode * node=qu.front();
                qu.pop();
                temp.push_back(node->val);
                if(node->left)  qu.push(node->left);
                if(node->right)  qu.push(node->right);
            }
            if(i%2==0){      //当i%2==0时，从左向右读起
                res.push_back(temp);
                i++;

            }else{          //当i%2!=0时，从右向左读起
                reverse(temp.begin(),temp.end());
                res.push_back(temp);
                i++;
            }
        }
        return res;

    }
};
