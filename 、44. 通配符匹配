给定一个字符串 (s) 和一个字符模式 (p) ，实现一个支持 '?' 和 '*' 的通配符匹配。

'?' 可以匹配任何单个字符。
'*' 可以匹配任意字符串（包括空字符串）。
两个字符串完全匹配才算匹配成功。

说明:

s 可能为空，且只包含从 a-z 的小写字母。
p 可能为空，且只包含从 a-z 的小写字母，以及字符 ? 和 *。
示例 1:

输入:
s = "aa"
p = "a"
输出: false
解释: "a" 无法匹配 "aa" 整个字符串。
示例 2:

输入:
s = "aa"
p = "*"
输出: true
解释: '*' 可以匹配任意字符串。
示例 3:

输入:
s = "cb"
p = "?a"
输出: false
解释: '?' 可以匹配 'c', 但第二个 'a' 无法匹配 'b'。
示例 4:

输入:
s = "adceb"
p = "*a*b"
输出: true
解释: 第一个 '*' 可以匹配空字符串, 第二个 '*' 可以匹配字符串 "dce".
示例 5:

输入:
s = "acdcb"
p = "a*c?b"
输入: false

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/wildcard-matching
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。


//动态规划
class Solution {
public:
    bool isMatch(string s, string p) {
        int row=s.length()+1;
        int col=p.length()+1;
        bool dp[row][col];  //dp[i][j]表示S的前i个和P的前j个是否可以匹配，可以为true，否则为false
        dp[0][0]=true;
        for(int i=0;i<col-1;i++){
            if(p[i]=='*'){
                dp[0][i+1]=dp[0][i];
            }else{
                dp[0][i+1]=false;
            }
        }           

        if(row>1){
            for(int i=0;i<row-1;i++){
                dp[i+1][0]=false;
            }
        }
        for(int i=0;i<row-1;i++){
            for(int j=0;j<col-1;j++){
                if(p[j]=='*'){
                    dp[i+1][j+1]=dp[i+1][j]||dp[i][j+1]||dp[i][j];
                }else if(s[i]==p[j]||p[j]=='?'){
                    dp[i+1][j+1]=dp[i][j];
                }else{
                    dp[i+1][j+1]=false;
                }
            }
        }
        return dp[row-1][col-1];
    }
};
