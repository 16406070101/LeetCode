给定一个链表，旋转链表，将链表每个节点向右移动 k 个位置，其中 k 是非负数。

示例 1:

输入: 1->2->3->4->5->NULL, k = 2
输出: 4->5->1->2->3->NULL
解释:
向右旋转 1 步: 5->1->2->3->4->NULL
向右旋转 2 步: 4->5->1->2->3->NULL
示例 2:

输入: 0->1->2->NULL, k = 4
输出: 2->0->1->NULL
解释:
向右旋转 1 步: 2->0->1->NULL
向右旋转 2 步: 1->2->0->NULL
向右旋转 3 步: 0->1->2->NULL
向右旋转 4 步: 2->0->1->NULL

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/rotate-list
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。


/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* rotateRight(ListNode* head, int k) {
        ListNode * newhead=new ListNode(0);
        ListNode * tmp1=head;
        ListNode * tmp2=head;
        int i=0;
        while(tmp1){
            tmp1=tmp1->next;
            i++;
        }
        if(i==0||k%i==0){
            return head;
        }
        k=k%i;
        tmp1=head;
        while(k){
            k--;
            tmp1=tmp1->next;
        }
        while(tmp1->next!=NULL){
            tmp1=tmp1->next;
            tmp2=tmp2->next;
        }
        newhead->next=tmp2->next;
        tmp2->next=NULL;
        tmp1->next=head;
        return newhead->next;
    }
};
