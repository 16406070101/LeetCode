给你一个字符串 s 和一个字符规律 p，请你来实现一个支持 '.' 和 '*' 的正则表达式匹配。

'.' 匹配任意单个字符
'*' 匹配零个或多个前面的那一个元素
所谓匹配，是要涵盖 整个 字符串 s的，而不是部分字符串。

说明:

s 可能为空，且只包含从 a-z 的小写字母。
p 可能为空，且只包含从 a-z 的小写字母，以及字符 . 和 *。
示例 1:

输入:
s = "aa"
p = "a"
输出: false
解释: "a" 无法匹配 "aa" 整个字符串。
示例 2:

输入:
s = "aa"
p = "a*"
输出: true
解释: 因为 '*' 代表可以匹配零个或多个前面的那一个元素, 在这里前面的元素就是 'a'。因此，字符串 "aa" 可被视为 'a' 重复了一次。
示例 3:

输入:
s = "ab"
p = ".*"
输出: true
解释: ".*" 表示可匹配零个或多个（'*'）任意字符（'.'）。
示例 4:

输入:
s = "aab"
p = "c*a*b"
输出: true
解释: 因为 '*' 表示零个或多个，这里 'c' 为 0 个, 'a' 被重复一次。因此可以匹配字符串 "aab"。
示例 5:

输入:
s = "mississippi"
p = "mis*is*p*."
输出: false

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/regular-expression-matching
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

//递归法
class Solution {
public:
    bool isMatch(string s, string p) {
        return isMatch(s.c_str(),p.c_str());
    }
    bool isMatch(const char * s, const char * p){
        if(*p==NULL) return *s==NULL;
        if (*(p+1)!='*') return *s&&(*s==*p||*p=='.')&&isMatch(s+1,p+1);
        else return  isMatch(s,p+2)||*s&&(*s==*p||*p=='.')&&isMatch(s+1,p);
    }
};
//动态规划
class Solution {
public:
    bool isMatch(string s,string p){
        int row=s.length()+1;
        int col=p.length()+1;
        bool dp[row][col]; //dp[i][j] 表示 s 的前 i 个是否能被 p 的前 j 个匹配  
	    dp[0][0]=true;                       //s的前零个可以与p的前零个进行匹配
	    for(int i=1;i<col;i++){
		    if(p[i-1]=='*' && dp[0][i-2]){  //当p的第i个元素为‘*’时且s的前0个元素与p的前i-2个元素相匹配时，可以到s的前零个可以与p的前i个进行匹配,否则不进行匹配,(因为这里的*一定匹配的是零个字符)
			    dp[0][i]=true; 
		    }else{
			    dp[0][i]=false;
		    }
	    }
	    if(row-1>=1){
		    for(int i=1;i<row;i++){//dp[i][0]表示s的前i个不能被p的前0个匹配
			    dp[i][0]=false;
		    }
	    }
	    for(int i=1;i<row;i++){
		    for(int j=1;j<col;j++){
			    if(s[i-1]==p[j-1] || p[j-1]=='.'){
				    dp[i][j]=dp[i-1][j-1];
			    }else if(p[j-1]=='*'){
				    if(p[j-2]!=s[i-1] && p[j-2]!='.'){
					    dp[i][j]=dp[i][j-2];
				    }else{
					    if(dp[i-1][j] || dp[i][j-1] || dp[i][j-2]) {
						    dp[i][j]=true;
					    }else{
						    dp[i][j]=false;
					    }
				    }
			    }
			    else{
				    dp[i][j]=false;
			    }
		    }
	    }
	    return dp[row-1][col-1];
    }
};
