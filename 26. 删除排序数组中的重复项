给定一个排序数组，你需要在原地删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。

不要使用额外的数组空间，你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。

示例 1:

给定数组 nums = [1,1,2], 

函数应该返回新的长度 2, 并且原数组 nums 的前两个元素被修改为 1, 2。 

你不需要考虑数组中超出新长度后面的元素。
示例 2:

给定 nums = [0,0,1,1,1,2,2,3,3,4],

函数应该返回新的长度 5, 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4。

你不需要考虑数组中超出新长度后面的元素。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。




//整理一下思路，就是从第一个位置开始，把符合条件的值放入，而条件就是与J索引的元素不同，索引j中存的就是当前元素，所以与j为索引的空间中的内容相比较，如果不同就放入索引为j+1的空间。
class Solution {
public:
    int removeDuplicates(vector<int>& nums) {
        if (nums.size()<2) {
            return nums.size();
        }
        int j=0;
        for (int i=1;i<nums.size();i++){
            if(nums[i]!=nums[j]){
                nums[++j]=nums[i];
            }
        }
        return ++j;
        
    }
};
