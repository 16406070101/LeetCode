/*给定一个包含 n 个整数的数组 nums 和一个目标值 target，判断 nums 中是否存在四个元素 a，b，c 和 d ，使得 a + b + c + d 的值与 target 相等？找出所有满足条件且不重复的四元组。

注意：

答案中不可以包含重复的四元组。

示例：

给定数组 nums = [1, 0, -1, 0, -2, 2]，和 target = 0。

满足要求的四元组集合为：
[
  [-1,  0, 0, 1],
  [-2, -1, 1, 2],
  [-2,  0, 0, 2]
]

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/4sum
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。*/




//暴力求解法


class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
        vector<vector<int >>  a;
        int size=nums.size();
        sort(nums.begin(),nums.end());
        for(int i=0;i<size;i++){
            for (int j=i+1;j<size;j++){
                for(int k=j+1;k<size;k++){
                    for(int x=k+1;x<size;x++){
                        if(nums[i]+nums[j]+nums[k]+nums[x]==target)
                        a.push_back({nums[i],nums[j],nums[k],nums[x]});
                        while((x+1)<size&&nums[x]==nums[x+1]){
                            x++;
                        }
                    }
                    while((k+1)<size&&nums[k]==nums[k+1]){   //以下四段都是为了去重
                        k++;
                    }
                }
                while((j+1)<size&&nums[j]==nums[j+1]){
                    j++;
                }
            }
            while((i+1)<size&&nums[i]==nums[i+1]){
                    i++;
            }
        }
        return a;
    }
}; 




//review
//双指针缩小范围
class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
        vector<vector<int >>  a;
        int size=nums.size();
        sort(nums.begin(),nums.end());
        for(int i=0;i<size-3;i++){
            for (int j=i+1;j<size-2;j++){
                int begin=j+1;     //双指针的首指针
                int end=size-1;    //双指针的尾指针，通过两个指针来代替暴力法中的两个循环，有效的缩小范围，查找范围
                while(begin<end){    
                    int sum=nums[i]+nums[j]+nums[begin]+nums[end];
                    if(sum==target){
                        a.push_back({nums[i],nums[j],nums[begin],nums[end]});//满足条件时，保存答案。
                        while((end-1)>0&&nums[end]==nums[end-1]){            //一下两步都是为了去重
                            end--;
                        }  
                        while((begin+1)<size&&nums[begin]==nums[begin+1]){
                            begin++;
                        } 
                        begin++;
                        end--;
                    }else if(sum>target){
//                       while((end-1)>0&&nums[end]==nums[end-1]){
//                           end--;
//                        }    
                        end--;
                    }else{
//                        while((begin+1)<size&&nums[begin]==nums[begin+1]){
//                            begin++;
//                        }    
                        begin++;
                    }
                }
                while((j+1)<size&&nums[j]==nums[j+1]){  //去重
                    j++;
                }
            }
            while((i+1)<size&&nums[i]==nums[i+1]){      //去重
                    i++;
            }
        }
        return a;
    }
};
