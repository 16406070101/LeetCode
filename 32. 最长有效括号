给定一个只包含 '(' 和 ')' 的字符串，找出最长的包含有效括号的子串的长度。

示例 1:

输入: "(()"
输出: 2
解释: 最长有效括号子串为 "()"
示例 2:

输入: ")()())"
输出: 4
解释: 最长有效括号子串为 "()()"

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/longest-valid-parentheses
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。


//解法一，采用栈+暴力解发，遍历出所有的可能的字符串，然后保留下来最大值。(但是却会超出时间限制)
class Solution {
public:
    int longestValidParentheses(string s) {
        int Max=0;
        int len=s.length();
        for(int i=0;i<=len;i++){   //遍历所有可能的字符串
            for(int j=i+2;j<=len;j=j+2){
                if(Lmax(s,i,j)){   //判断是否符合规则
                    Max=max(Max,j-i);  //保留最大的长度 
                }
            }
        }
        return Max;
    }
    bool Lmax(string &s,int begin,int end){  //判断从下标begin开始，到end是否为有效括号
        stack <char> arr;
        for(int i=begin;i<end;i++){
            if(s[i]=='('){
                arr.push(s[i]);
            }else if(!arr.empty()&&arr.top()=='('){
                       arr.pop();
                
            }else{
                    return false;
            }
        }
        return  arr.empty();
        
    }
};
//采用栈+动态规化   dp[i]表示从下标为i之前正常的匹配的长度。
class Solution {
public:
    int longestValidParentheses(string s) {
        int Max=0;
        int len=s.length();
        if(len<=1){
            return 0;

        }
        int dp[len];//dp[i]表示i下标前的最长长度
        dp[0]=0;
        for(int i=1;i<len;i++){   
            if(s[i]==')'&&s[i-1]=='('){
                if(i>1){
                    dp[i]=dp[i-2]+2;
                }else{
                    dp[i]=2;
                }
            }else if(i-dp[i-1]-1>=0&&s[i]==')'&&s[i-dp[i-1]-1]=='('){
                if((i-dp[i-1]-2)>=0){
                    dp[i]=dp[i-1]+2+ dp[i-dp[i-1]-2];
                }else{
                    dp[i]=dp[i-1]+2;
                }

            }else{
                dp[i]=0;
            }
            Max=max(dp[i],Max);
        }
       return Max;
    }

};
