给定一个只包含 '(' 和 ')' 的字符串，找出最长的包含有效括号的子串的长度。

示例 1:

输入: "(()"
输出: 2
解释: 最长有效括号子串为 "()"
示例 2:

输入: ")()())"
输出: 4
解释: 最长有效括号子串为 "()()"

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/longest-valid-parentheses
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。


//解法一，采用栈+暴力解发，遍历出所有的可能的字符串，然后保留下来最大值。(但是却会超出时间限制)
class Solution {
public:
    int longestValidParentheses(string s) {
        int Max=0;
        int len=s.length();
        for(int i=0;i<=len;i++){   //遍历所有可能的字符串
            for(int j=i+2;j<=len;j=j+2){
                if(Lmax(s,i,j)){   //判断是否符合规则
                    Max=max(Max,j-i);  //保留最大的长度 
                }
            }
        }
        return Max;
    }
    bool Lmax(string &s,int begin,int end){  //判断从下标begin开始，到end是否为有效括号
        stack <char> arr;
        for(int i=begin;i<end;i++){
            if(s[i]=='('){
                arr.push(s[i]);
            }else if(!arr.empty()&&arr.top()=='('){
                       arr.pop();
                
            }else{
                    return false;
            }
        }
        return  arr.empty();
        
    }
};
//采用栈+动态规化   dp[i][j]表示从下标为i到下标为j是否可以是正常的匹配，正常为1，非正常为0，
