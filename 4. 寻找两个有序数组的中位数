//给定两个大小为 m 和 n 的有序数组 nums1 和 nums2。

//请你找出这两个有序数组的中位数，并且要求算法的时间复杂度为 O(log(m + n))。

//你可以假设 nums1 和 nums2 不会同时为空。

//示例 1:

//nums1 = [1, 3]
//nums2 = [2]

//则中位数是 2.0
//示例 2:

//nums1 = [1, 2]
//nums2 = [3, 4]

//则中位数是 (2 + 3)/2 = 2.5


class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        int size2=nums2.size();
        for(int i=0;i<size2;i++){
            nums1.push_back(nums2[i]);
        }
        sort(nums1.begin(),nums1.end());
        int size=nums1.size();                 //合并后数组的长度
        int i=0;
        double z=0;
        while(i<=size-1){
            if(size-2==i){
                z=(nums1[size-1]+nums1[i])/2.0;
            }
            if(size-1==i){
                z=(nums1[i])/1.0;
            }
            i++;
            size--;
        }
        return z;
    }
};

